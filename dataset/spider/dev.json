[
    {
        "id": 0,
        "db_id": "concert_singer",
        "utterance": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 1,
        "db_id": "concert_singer",
        "utterance": "What are the names, countries, and ages for every singer in descending order of age?",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 2,
        "db_id": "concert_singer",
        "utterance": "What is the average, minimum, and maximum age of all singers from France?",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 3,
        "db_id": "concert_singer",
        "utterance": "What is the average, minimum, and maximum age for all French singers?",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 4,
        "db_id": "concert_singer",
        "utterance": "Show the name and the release year of the song by the youngest singer.",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 5,
        "db_id": "concert_singer",
        "utterance": "What are the names and release years for all the songs of the youngest singer?",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 6,
        "db_id": "concert_singer",
        "utterance": "What are all distinct countries where singers above age 20 are from?",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 7,
        "db_id": "concert_singer",
        "utterance": "What are  the different countries with singers above age 20?",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 8,
        "db_id": "concert_singer",
        "utterance": "List all song names by singers above the average age.",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 9,
        "db_id": "concert_singer",
        "utterance": "What are all the song names by singers who are older than average?",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 10,
        "db_id": "concert_singer",
        "utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)"
        ]
    },
    {
        "id": 11,
        "db_id": "concert_singer",
        "utterance": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)"
        ]
    },
    {
        "id": 12,
        "db_id": "concert_singer",
        "utterance": "What is the maximum capacity and the average of all stadiums ?",
        "query": "select max(capacity), average from stadium",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)"
        ]
    },
    {
        "id": 13,
        "db_id": "concert_singer",
        "utterance": "What is the average and maximum capacities for all stadiums ?",
        "query": "select avg(capacity) ,  max(capacity) from stadium",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)"
        ]
    },
    {
        "id": 14,
        "db_id": "concert_singer",
        "utterance": "What is the name and capacity for the stadium with highest average attendance?",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)"
        ]
    },
    {
        "id": 15,
        "db_id": "concert_singer",
        "utterance": "What is the name and capacity for the stadium with the highest average attendance?",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)"
        ]
    },
    {
        "id": 16,
        "db_id": "concert_singer",
        "utterance": "Show the stadium names without any concert.",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)"
        ]
    },
    {
        "id": 17,
        "db_id": "concert_singer",
        "utterance": "What are the names of the stadiums without any concerts?",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)"
        ]
    },
    {
        "id": 18,
        "db_id": "concert_singer",
        "utterance": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 19,
        "db_id": "concert_singer",
        "utterance": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)"
        ]
    },
    {
        "id": 20,
        "db_id": "concert_singer",
        "utterance": "What are the names of all stadiums that did not have a concert in 2014?",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)"
        ]
    },
    {
        "id": 21,
        "db_id": "concert_singer",
        "utterance": "List all singer names in concerts in year 2014.",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "rel_schema": [
            "concert_singer.singer in concert(concert id, singer id)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)",
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 22,
        "db_id": "concert_singer",
        "utterance": "What are the names of the singers who performed in a concert in 2014?",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "rel_schema": [
            "concert_singer.singer in concert(concert id, singer id)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)",
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 23,
        "db_id": "concert_singer",
        "utterance": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 24,
        "db_id": "concert_singer",
        "utterance": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "rel_schema": [
            "concert_singer.singer(singer id, name, country, song name, song release year, age, is male)"
        ]
    },
    {
        "id": 25,
        "db_id": "concert_singer",
        "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)"
        ]
    },
    {
        "id": 26,
        "db_id": "concert_singer",
        "utterance": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "rel_schema": [
            "concert_singer.stadium(stadium id, location, name, capacity, highest, lowest, average)",
            "concert_singer.concert(concert id, concert name, theme, stadium id, year)"
        ]
    },
    {
        "id": 27,
        "db_id": "pets_1",
        "utterance": "Find the weight of the youngest dog.",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 28,
        "db_id": "pets_1",
        "utterance": "How much does the youngest dog weigh?",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 29,
        "db_id": "pets_1",
        "utterance": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 30,
        "db_id": "pets_1",
        "utterance": "List the maximum weight and type for each type of pet.",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 31,
        "db_id": "pets_1",
        "utterance": "Find the number of distinct type of pets.",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 32,
        "db_id": "pets_1",
        "utterance": "How many different types of pet are there?",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 33,
        "db_id": "pets_1",
        "utterance": "Find the first name of students who have cat or dog pet.",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 34,
        "db_id": "pets_1",
        "utterance": "What are the first names of every student who has a cat or dog as a pet?",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 35,
        "db_id": "pets_1",
        "utterance": "Find the first name of students who have both cat and dog pets .",
        "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 36,
        "db_id": "pets_1",
        "utterance": "What are the students' first names who have both cats and dogs as pets?",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 37,
        "db_id": "pets_1",
        "utterance": "Find the major and age of students who do not have a cat pet.",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 38,
        "db_id": "pets_1",
        "utterance": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 39,
        "db_id": "pets_1",
        "utterance": "Find the id of students who do not have a cat pet.",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 40,
        "db_id": "pets_1",
        "utterance": "What are the ids of the students who do not own cats as pets?",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 41,
        "db_id": "pets_1",
        "utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 42,
        "db_id": "pets_1",
        "utterance": "What is the first name of every student who has a dog but does not have a cat?",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 43,
        "db_id": "pets_1",
        "utterance": "Find the type and weight of the youngest pet.",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 44,
        "db_id": "pets_1",
        "utterance": "What type of pet is the youngest animal, and how much does it weigh?",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 45,
        "db_id": "pets_1",
        "utterance": "Find the id and weight of all pets whose age is older than 1.",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 46,
        "db_id": "pets_1",
        "utterance": "What is the id and weight of every pet who is older than 1?",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 47,
        "db_id": "pets_1",
        "utterance": "Find the average and maximum age for each type of pet.",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 48,
        "db_id": "pets_1",
        "utterance": "What is the average and maximum age for each pet type?",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 49,
        "db_id": "pets_1",
        "utterance": "Find the average weight for each pet type.",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 50,
        "db_id": "pets_1",
        "utterance": "What is the average weight for each type of pet?",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)"
        ]
    },
    {
        "id": 51,
        "db_id": "pets_1",
        "utterance": "Find the first name and age of students who have a pet.",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "rel_schema": [
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 52,
        "db_id": "pets_1",
        "utterance": "What are the different first names and ages of the students who do have pets?",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "rel_schema": [
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 53,
        "db_id": "pets_1",
        "utterance": "Find the id of the pet owned by student whose last name is ‘Smith’.",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "rel_schema": [
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 54,
        "db_id": "pets_1",
        "utterance": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "rel_schema": [
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 55,
        "db_id": "pets_1",
        "utterance": "Find the last name of the student who has a cat that is age 3.",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 56,
        "db_id": "pets_1",
        "utterance": "What is the last name of the student who has a cat that is 3 years old?",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "rel_schema": [
            "pets_1.pets(pet id, pet type, pet age, weight)",
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 57,
        "db_id": "pets_1",
        "utterance": "Find the average age of students who do not have any pet .",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "rel_schema": [
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 58,
        "db_id": "pets_1",
        "utterance": "What is the average age for all students who do not own any pets ?",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "rel_schema": [
            "pets_1.has pet(student id, pet id)",
            "pets_1.student(student id, last name, first name, age, sex, major, advisor, city code)"
        ]
    },
    {
        "id": 59,
        "db_id": "car_1",
        "utterance": "Which model of the car has the minimum horsepower?",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 60,
        "db_id": "car_1",
        "utterance": "What is the model of the car with the smallest amount of horsepower?",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 61,
        "db_id": "car_1",
        "utterance": "Find the model of the car whose weight is below the average weight.",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 62,
        "db_id": "car_1",
        "utterance": "What is the model for the car with a weight smaller than the average?",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 63,
        "db_id": "car_1",
        "utterance": "Find the name of the makers that produced some cars in the year of 1970?",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "rel_schema": [
            "car_1.car makers(id, maker, full name, country)",
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 64,
        "db_id": "car_1",
        "utterance": "What is the name of the different car makers who produced a car in 1970?",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "rel_schema": [
            "car_1.car makers(id, maker, full name, country)",
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 65,
        "db_id": "car_1",
        "utterance": "Find the make and production time of the cars that were produced in the earliest year?",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 66,
        "db_id": "car_1",
        "utterance": "What is the maker of the carr produced in the earliest year and what year was it?",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 67,
        "db_id": "car_1",
        "utterance": "Which distinct car models are the produced after 1980?",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 68,
        "db_id": "car_1",
        "utterance": "What are the different models for the cards produced after 1980?",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 69,
        "db_id": "car_1",
        "utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 70,
        "db_id": "car_1",
        "utterance": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 71,
        "db_id": "car_1",
        "utterance": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 72,
        "db_id": "car_1",
        "utterance": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 73,
        "db_id": "car_1",
        "utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 74,
        "db_id": "car_1",
        "utterance": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 75,
        "db_id": "car_1",
        "utterance": "What are all the makers and models?",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "rel_schema": [
            "car_1.model list(model id, maker, model)"
        ]
    },
    {
        "id": 76,
        "db_id": "car_1",
        "utterance": "What are the makers and models?",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "rel_schema": [
            "car_1.model list(model id, maker, model)"
        ]
    },
    {
        "id": 77,
        "db_id": "car_1",
        "utterance": "What is the average weight of cars each year?",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 78,
        "db_id": "car_1",
        "utterance": "What is the average weight and year for each year?",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 79,
        "db_id": "car_1",
        "utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 80,
        "db_id": "car_1",
        "utterance": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 81,
        "db_id": "car_1",
        "utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 82,
        "db_id": "car_1",
        "utterance": "What is the car model with the highest mpg ?",
        "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 83,
        "db_id": "car_1",
        "utterance": "What is the average horsepower of the cars before 1980?",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 84,
        "db_id": "car_1",
        "utterance": "What is the average horsepower for all cars produced before 1980 ?",
        "query": "select avg(horsepower) from cars_data where year  <  1980;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 85,
        "db_id": "car_1",
        "utterance": "What is the average edispl of the cars of model volvo?",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 86,
        "db_id": "car_1",
        "utterance": "What is the average edispl for all volvos?",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 87,
        "db_id": "car_1",
        "utterance": "What is the maximum accelerate for different number of cylinders?",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 88,
        "db_id": "car_1",
        "utterance": "What is the maximum accelerate for all the different cylinders?",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 89,
        "db_id": "car_1",
        "utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "rel_schema": [
            "car_1.car makers(id, maker, full name, country)",
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 90,
        "db_id": "car_1",
        "utterance": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "rel_schema": [
            "car_1.car makers(id, maker, full name, country)",
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 91,
        "db_id": "car_1",
        "utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 92,
        "db_id": "car_1",
        "utterance": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 93,
        "db_id": "car_1",
        "utterance": "What is the horsepower of the car with the largest accelerate?",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 94,
        "db_id": "car_1",
        "utterance": "What is the horsepower of the car with the greatest accelerate?",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 95,
        "db_id": "car_1",
        "utterance": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 96,
        "db_id": "car_1",
        "utterance": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 97,
        "db_id": "car_1",
        "utterance": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 98,
        "db_id": "car_1",
        "utterance": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 99,
        "db_id": "car_1",
        "utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 100,
        "db_id": "car_1",
        "utterance": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "rel_schema": [
            "car_1.car names(make id, model, make)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 101,
        "db_id": "car_1",
        "utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 102,
        "db_id": "car_1",
        "utterance": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "rel_schema": [
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 103,
        "db_id": "car_1",
        "utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "rel_schema": [
            "car_1.car makers(id, maker, full name, country)",
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 104,
        "db_id": "car_1",
        "utterance": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "rel_schema": [
            "car_1.car makers(id, maker, full name, country)",
            "car_1.car names(make id, model, make)",
            "car_1.model list(model id, maker, model)",
            "car_1.cars data(id, mpg, cylinders, edispl, horsepower, weight, accelerate, year)"
        ]
    },
    {
        "id": 105,
        "db_id": "car_1",
        "utterance": "What are the name of the countries where there is not a single car maker?",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "rel_schema": [
            "car_1.countries(country id, country name, continent)",
            "car_1.car makers(id, maker, full name, country)"
        ]
    },
    {
        "id": 106,
        "db_id": "car_1",
        "utterance": "What are the names of the countries with no car makers?",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "rel_schema": [
            "car_1.countries(country id, country name, continent)",
            "car_1.car makers(id, maker, full name, country)"
        ]
    },
    {
        "id": 107,
        "db_id": "flight_2",
        "utterance": "Which country does Airline \"JetBlue Airways\" belong to?",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 108,
        "db_id": "flight_2",
        "utterance": "What country is Jetblue Airways affiliated with?",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 109,
        "db_id": "flight_2",
        "utterance": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 110,
        "db_id": "flight_2",
        "utterance": "Which abbreviation corresponds to Jetblue Airways?",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 111,
        "db_id": "flight_2",
        "utterance": "List all airline names and their abbreviations in \"USA\".",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 112,
        "db_id": "flight_2",
        "utterance": "What are the airline names and abbreviations for airlines in the USA?",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 113,
        "db_id": "flight_2",
        "utterance": "List the airport code and name in the city of Anthony.",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 114,
        "db_id": "flight_2",
        "utterance": "Give the airport code and airport name corresonding to the city Anthony.",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 115,
        "db_id": "flight_2",
        "utterance": "Which airline has abbreviation 'UAL'?",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 116,
        "db_id": "flight_2",
        "utterance": "Give the airline with abbreviation 'UAL'.",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "rel_schema": [
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 117,
        "db_id": "flight_2",
        "utterance": "Which city and country is the Alton airport at?",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 118,
        "db_id": "flight_2",
        "utterance": "Give the city and country for the Alton airport.",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 119,
        "db_id": "flight_2",
        "utterance": "What is the airport name for airport 'AKO'?",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 120,
        "db_id": "flight_2",
        "utterance": "Return the name of the airport with code 'AKO'.",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 121,
        "db_id": "flight_2",
        "utterance": "What are airport names at City 'Aberdeen'?",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 122,
        "db_id": "flight_2",
        "utterance": "What are the names of airports in Aberdeen?",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "rel_schema": [
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 123,
        "db_id": "flight_2",
        "utterance": "What are airlines that have some flight departing from airport 'AHD'?",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 124,
        "db_id": "flight_2",
        "utterance": "Which airlines have a flight with source airport AHD?",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 125,
        "db_id": "flight_2",
        "utterance": "What are airlines that have flights arriving at airport 'AHD'?",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 126,
        "db_id": "flight_2",
        "utterance": "Which airlines have a flight with destination airport AHD?",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 127,
        "db_id": "flight_2",
        "utterance": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 128,
        "db_id": "flight_2",
        "utterance": "Which airlines have departing flights from both APG and CVO airports?",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 129,
        "db_id": "flight_2",
        "utterance": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 130,
        "db_id": "flight_2",
        "utterance": "Which airlines have departures from CVO but not from APG airports?",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 131,
        "db_id": "flight_2",
        "utterance": "What are flight numbers of Airline \"United Airlines\"?",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 132,
        "db_id": "flight_2",
        "utterance": "Which flight numbers correspond to United Airlines flights?",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airlines(airline id, airline name, abbreviation, country)"
        ]
    },
    {
        "id": 133,
        "db_id": "flight_2",
        "utterance": "What are flight numbers of flights departing from Airport \"APG\"?",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)"
        ]
    },
    {
        "id": 134,
        "db_id": "flight_2",
        "utterance": "Give the flight numbers of flights leaving from APG.",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)"
        ]
    },
    {
        "id": 135,
        "db_id": "flight_2",
        "utterance": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)"
        ]
    },
    {
        "id": 136,
        "db_id": "flight_2",
        "utterance": "Give the flight numbers of flights landing at APG.",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)"
        ]
    },
    {
        "id": 137,
        "db_id": "flight_2",
        "utterance": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 138,
        "db_id": "flight_2",
        "utterance": "Give the flight numbers of flights leaving from Aberdeen.",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 139,
        "db_id": "flight_2",
        "utterance": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 140,
        "db_id": "flight_2",
        "utterance": "Give the flight numbers of flights arriving in Aberdeen.",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 141,
        "db_id": "flight_2",
        "utterance": "Find the name of airports which do not have any flight in and out.",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 142,
        "db_id": "flight_2",
        "utterance": "Which airports do not have departing or arriving flights?",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "rel_schema": [
            "flight_2.flights(airline, flight number, source airport, destination airport)",
            "flight_2.airports(city, airport code, airport name, country, country abbrev)"
        ]
    },
    {
        "id": 143,
        "db_id": "employee_hire_evaluation",
        "utterance": "Sort employee names by their age in ascending order.",
        "query": "SELECT name FROM employee ORDER BY age",
        "rel_schema": [
            "employee_hire_evaluation.employee(employee id, name, age, city)"
        ]
    },
    {
        "id": 144,
        "db_id": "employee_hire_evaluation",
        "utterance": "List the names of employees and sort in ascending order of age.",
        "query": "SELECT name FROM employee ORDER BY age",
        "rel_schema": [
            "employee_hire_evaluation.employee(employee id, name, age, city)"
        ]
    },
    {
        "id": 145,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the manager name and district of the shop whose number of products is the largest.",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 146,
        "db_id": "employee_hire_evaluation",
        "utterance": "What are the manager name and district of the shop that sells the largest number of products?",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 147,
        "db_id": "employee_hire_evaluation",
        "utterance": "find the minimum and maximum number of products of all stores.",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 148,
        "db_id": "employee_hire_evaluation",
        "utterance": "What are the minimum and maximum number of products across all the shops?",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 149,
        "db_id": "employee_hire_evaluation",
        "utterance": "Return the name, location and district of all shops in descending order of number of products.",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 150,
        "db_id": "employee_hire_evaluation",
        "utterance": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 151,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the names of stores whose number products is more than the average number of products.",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 152,
        "db_id": "employee_hire_evaluation",
        "utterance": "Which shops' number products is above the average? Give me the shop names.",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 153,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the name of the employee who got the highest one time bonus.",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "rel_schema": [
            "employee_hire_evaluation.employee(employee id, name, age, city)",
            "employee_hire_evaluation.evaluation(employee id, year awarded, bonus)"
        ]
    },
    {
        "id": 154,
        "db_id": "employee_hire_evaluation",
        "utterance": "Which employee received the biggest bonus? Give me the employee name.",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "rel_schema": [
            "employee_hire_evaluation.employee(employee id, name, age, city)",
            "employee_hire_evaluation.evaluation(employee id, year awarded, bonus)"
        ]
    },
    {
        "id": 155,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the names of employees who never won any award in the evaluation.",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "rel_schema": [
            "employee_hire_evaluation.employee(employee id, name, age, city)",
            "employee_hire_evaluation.evaluation(employee id, year awarded, bonus)"
        ]
    },
    {
        "id": 156,
        "db_id": "employee_hire_evaluation",
        "utterance": "What are the names of the employees who never received any evaluation?",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "rel_schema": [
            "employee_hire_evaluation.employee(employee id, name, age, city)",
            "employee_hire_evaluation.evaluation(employee id, year awarded, bonus)"
        ]
    },
    {
        "id": 157,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the name of the shops that do not hire any employee.",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "rel_schema": [
            "employee_hire_evaluation.hiring(shop id, employee id, start from, is full time)",
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 158,
        "db_id": "employee_hire_evaluation",
        "utterance": "Which shops run with no employees? Find the shop names",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "rel_schema": [
            "employee_hire_evaluation.hiring(shop id, employee id, start from, is full time)",
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 159,
        "db_id": "employee_hire_evaluation",
        "utterance": "What is total bonus given in all evaluations?",
        "query": "SELECT sum(bonus) FROM evaluation",
        "rel_schema": [
            "employee_hire_evaluation.evaluation(employee id, year awarded, bonus)"
        ]
    },
    {
        "id": 160,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the total amount of bonus given in all the evaluations.",
        "query": "SELECT sum(bonus) FROM evaluation",
        "rel_schema": [
            "employee_hire_evaluation.evaluation(employee id, year awarded, bonus)"
        ]
    },
    {
        "id": 161,
        "db_id": "employee_hire_evaluation",
        "utterance": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 162,
        "db_id": "employee_hire_evaluation",
        "utterance": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 163,
        "db_id": "employee_hire_evaluation",
        "utterance": "How many different store locations are there?",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 164,
        "db_id": "employee_hire_evaluation",
        "utterance": "Count the number of distinct store locations.",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "rel_schema": [
            "employee_hire_evaluation.shop(shop id, name, location, district, number products, manager name)"
        ]
    },
    {
        "id": 165,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "List document IDs, document names, and document descriptions for all documents.",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 166,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the ids, names, and descriptions for all documents?",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 167,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What is the document name and template id for document with description with the letter 'w' in it?",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 168,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the names and template ids for documents that contain the letter w in their description.",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 169,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 170,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 171,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "How many different templates do all document use?",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 172,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Count the number of different templates used for documents.",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "rel_schema": [
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 173,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show ids for all templates not used by any document.",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 174,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the ids for templates that are not used in any documents?",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 175,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show template ids, version numbers, and template type codes for all templates.",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 176,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the ids, version numbers, and type codes for each template?",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 177,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show all distinct template type codes for all templates.",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 178,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the different template type codes?",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 179,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the ids of templates with template type code PP or PPT?",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 180,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the ids of templates that have the code PP or PPT.",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 181,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What is the version number and template type code for the template with version number later than 5?",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 182,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 183,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What the smallest version number and its template type code?",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 184,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the lowest version number, along with its corresponding template type code.",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)"
        ]
    },
    {
        "id": 185,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What is the template type code of the template used by document with the name \"Data base\"?",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 186,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the template type code of the template that is used by a document named Data base.",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 187,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show all document names using templates with template type code BK.",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 188,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the names of documents that use templates with the code BK?",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 189,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show all template type codes that are not used by any document.",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 190,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the codes of template types that are not used for any document?",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 191,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show all template type codes and descriptions.",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "rel_schema": [
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 192,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the type codes and descriptions for all template types?",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "rel_schema": [
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 193,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What is the template type descriptions for template type code \"AD\".",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 194,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the template type description of the template type with the code AD.",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 195,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What is the template type code for template type description \"Book\".",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 196,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the type code of the template type with the description \"Book\".",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 197,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the distinct template type descriptions for the templates ever used by any document?",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 198,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the different descriptions for templates that have been used in a document.",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 199,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the template ids with template type description \"Presentation\".",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 200,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Return the ids corresponding to templates with the description 'Presentation'.",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.templates(template id, version number, template type code, date effective from, date effective to, template details)",
            "cre_Doc_Template_Mgt.reference template types(template type code, template type description)"
        ]
    },
    {
        "id": 201,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show paragraph details for paragraph with text 'Korea ' .",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)"
        ]
    },
    {
        "id": 202,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)"
        ]
    },
    {
        "id": 203,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 204,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 205,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show all paragraph texts for the document \"Customer reviews\".",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 206,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)",
            "cre_Doc_Template_Mgt.documents(document id, template id, document name, document description, other details)"
        ]
    },
    {
        "id": 207,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)"
        ]
    },
    {
        "id": 208,
        "db_id": "cre_Doc_Template_Mgt",
        "utterance": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "rel_schema": [
            "cre_Doc_Template_Mgt.paragraphs(paragraph id, document id, paragraph text, other details)"
        ]
    },
    {
        "id": 209,
        "db_id": "course_teach",
        "utterance": "List the names of teachers in ascending order of age.",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 210,
        "db_id": "course_teach",
        "utterance": "What are the names of the teachers ordered by ascending age?",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 211,
        "db_id": "course_teach",
        "utterance": "What are the age and hometown of teachers?",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 212,
        "db_id": "course_teach",
        "utterance": "What is the age and hometown of every teacher?",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 213,
        "db_id": "course_teach",
        "utterance": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 214,
        "db_id": "course_teach",
        "utterance": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 215,
        "db_id": "course_teach",
        "utterance": "Show the name of teachers aged either 32 or 33?",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 216,
        "db_id": "course_teach",
        "utterance": "What are the names of the teachers who are aged either 32 or 33?",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 217,
        "db_id": "course_teach",
        "utterance": "What is the hometown of the youngest teacher?",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 218,
        "db_id": "course_teach",
        "utterance": "Where is the youngest teacher from?",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)"
        ]
    },
    {
        "id": 219,
        "db_id": "course_teach",
        "utterance": "Show names of teachers and the courses they are arranged to teach.",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)",
            "course_teach.course(course id, staring date, course)"
        ]
    },
    {
        "id": 220,
        "db_id": "course_teach",
        "utterance": "What is the name of each teacher and what course they teach?",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)",
            "course_teach.course(course id, staring date, course)"
        ]
    },
    {
        "id": 221,
        "db_id": "course_teach",
        "utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)",
            "course_teach.course(course id, staring date, course)"
        ]
    },
    {
        "id": 222,
        "db_id": "course_teach",
        "utterance": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)",
            "course_teach.course(course id, staring date, course)"
        ]
    },
    {
        "id": 223,
        "db_id": "course_teach",
        "utterance": "Show the name of the teacher for the math course.",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)",
            "course_teach.course(course id, staring date, course)"
        ]
    },
    {
        "id": 224,
        "db_id": "course_teach",
        "utterance": "What are the names of the people who teach math courses?",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)",
            "course_teach.course(course id, staring date, course)"
        ]
    },
    {
        "id": 225,
        "db_id": "course_teach",
        "utterance": "List the names of teachers who have not been arranged to teach courses.",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)"
        ]
    },
    {
        "id": 226,
        "db_id": "course_teach",
        "utterance": "What are the names of the teachers whose courses have not been arranged?",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "rel_schema": [
            "course_teach.teacher(teacher id, name, age, hometown)",
            "course_teach.course arrange(course id, teacher id, grade)"
        ]
    },
    {
        "id": 227,
        "db_id": "museum_visit",
        "utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "rel_schema": [
            "museum_visit.customer(customer id, name, level of membership, age)"
        ]
    },
    {
        "id": 228,
        "db_id": "museum_visit",
        "utterance": "What is the average age of the visitors whose membership level is not higher than 4?",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "rel_schema": [
            "museum_visit.customer(customer id, name, level of membership, age)"
        ]
    },
    {
        "id": 229,
        "db_id": "museum_visit",
        "utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "rel_schema": [
            "museum_visit.customer(customer id, name, level of membership, age)"
        ]
    },
    {
        "id": 230,
        "db_id": "museum_visit",
        "utterance": "Find the id and name of the museum that has the most staff members?",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "rel_schema": [
            "museum_visit.museum(museum id, name, num of staff, open year)"
        ]
    },
    {
        "id": 231,
        "db_id": "museum_visit",
        "utterance": "Find the average number of staff working for the museums that were open before 2009.",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "rel_schema": [
            "museum_visit.museum(museum id, name, num of staff, open year)"
        ]
    },
    {
        "id": 232,
        "db_id": "museum_visit",
        "utterance": "What are the opening year and staff number of the museum named Plaza Museum?",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "rel_schema": [
            "museum_visit.museum(museum id, name, num of staff, open year)"
        ]
    },
    {
        "id": 233,
        "db_id": "museum_visit",
        "utterance": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "rel_schema": [
            "museum_visit.museum(museum id, name, num of staff, open year)"
        ]
    },
    {
        "id": 234,
        "db_id": "museum_visit",
        "utterance": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "rel_schema": [
            "museum_visit.customer(customer id, name, level of membership, age)",
            "museum_visit.visit(museum id, customer id, num of ticket, total spent)"
        ]
    },
    {
        "id": 235,
        "db_id": "museum_visit",
        "utterance": "What is the name of the museum that had no visitor yet?",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "rel_schema": [
            "museum_visit.museum(museum id, name, num of staff, open year)",
            "museum_visit.visit(museum id, customer id, num of ticket, total spent)"
        ]
    },
    {
        "id": 236,
        "db_id": "museum_visit",
        "utterance": "Find the name and age of the visitor who bought the most tickets at once.",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "rel_schema": [
            "museum_visit.customer(customer id, name, level of membership, age)",
            "museum_visit.visit(museum id, customer id, num of ticket, total spent)"
        ]
    },
    {
        "id": 237,
        "db_id": "museum_visit",
        "utterance": "What are the average and maximum number of tickets bought in all visits?",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "rel_schema": [
            "museum_visit.visit(museum id, customer id, num of ticket, total spent)"
        ]
    },
    {
        "id": 238,
        "db_id": "museum_visit",
        "utterance": "What is the total ticket expense of the visitors whose membership level is 1?",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "rel_schema": [
            "museum_visit.customer(customer id, name, level of membership, age)",
            "museum_visit.visit(museum id, customer id, num of ticket, total spent)"
        ]
    },
    {
        "id": 239,
        "db_id": "museum_visit",
        "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "rel_schema": [
            "museum_visit.museum(museum id, name, num of staff, open year)",
            "museum_visit.customer(customer id, name, level of membership, age)",
            "museum_visit.visit(museum id, customer id, num of ticket, total spent)"
        ]
    },
    {
        "id": 240,
        "db_id": "wta_1",
        "utterance": "List the first name and birth date of all players from the country with code USA.",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 241,
        "db_id": "wta_1",
        "utterance": "What are the first names and birth dates of players from the USA?",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 242,
        "db_id": "wta_1",
        "utterance": "Find the average age of losers and winners of all matches.",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 243,
        "db_id": "wta_1",
        "utterance": "What are the average ages of losers and winners across matches?",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 244,
        "db_id": "wta_1",
        "utterance": "Find the average rank of winners in all matches.",
        "query": "SELECT avg(winner_rank) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 245,
        "db_id": "wta_1",
        "utterance": "What is the average rank for winners in all matches?",
        "query": "SELECT avg(winner_rank) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 246,
        "db_id": "wta_1",
        "utterance": "Find the highest rank of losers in all matches.",
        "query": "SELECT min(loser_rank) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 247,
        "db_id": "wta_1",
        "utterance": "What is the best rank of losers across all matches?",
        "query": "SELECT min(loser_rank) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 248,
        "db_id": "wta_1",
        "utterance": "find the number of distinct country codes of all players.",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 249,
        "db_id": "wta_1",
        "utterance": "How many distinct countries do players come from?",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 250,
        "db_id": "wta_1",
        "utterance": "Find the number of distinct name of losers.",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 251,
        "db_id": "wta_1",
        "utterance": "How many different loser names are there?",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 252,
        "db_id": "wta_1",
        "utterance": "List the names of all winners who played in both 2013 and 2016.",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 253,
        "db_id": "wta_1",
        "utterance": "What are the names of players who won in both 2013 and 2016?",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 254,
        "db_id": "wta_1",
        "utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 255,
        "db_id": "wta_1",
        "utterance": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 256,
        "db_id": "wta_1",
        "utterance": "Find the first name and country code of the oldest player.",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 257,
        "db_id": "wta_1",
        "utterance": "What is the first name and country code of the oldest player?",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 258,
        "db_id": "wta_1",
        "utterance": "List the first and last name of all players in the order of birth date.",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 259,
        "db_id": "wta_1",
        "utterance": "What are the full names of all players, sorted by birth date?",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 260,
        "db_id": "wta_1",
        "utterance": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 261,
        "db_id": "wta_1",
        "utterance": "What are the full names of all left handed players, in order of birth date?",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "rel_schema": [
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 262,
        "db_id": "wta_1",
        "utterance": "Find the first name and country code of the player who did the most number of tours.",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 263,
        "db_id": "wta_1",
        "utterance": "What is the first name and country code of the player with the most tours?",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 264,
        "db_id": "wta_1",
        "utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 265,
        "db_id": "wta_1",
        "utterance": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 266,
        "db_id": "wta_1",
        "utterance": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 267,
        "db_id": "wta_1",
        "utterance": "What are the names of the winner and loser who played in the longest match?",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 268,
        "db_id": "wta_1",
        "utterance": "Find the average ranking for each player and their first name.",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 269,
        "db_id": "wta_1",
        "utterance": "What are the first names of all players, and their average rankings?",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 270,
        "db_id": "wta_1",
        "utterance": "Find the total ranking points for each player and their first name.",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 271,
        "db_id": "wta_1",
        "utterance": "What are the first names of all players, and their total ranking points?",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 272,
        "db_id": "wta_1",
        "utterance": "Find the total number of tours for each ranking date.",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)"
        ]
    },
    {
        "id": 273,
        "db_id": "wta_1",
        "utterance": "How many total tours were there for each ranking date?",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "rel_schema": [
            "wta_1.rankings(ranking date, ranking, player id, ranking points, tours)"
        ]
    },
    {
        "id": 274,
        "db_id": "wta_1",
        "utterance": "Find the name and rank of the 3 youngest winners across all matches.",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 275,
        "db_id": "wta_1",
        "utterance": "What are the names and ranks of the three youngest winners across all matches?",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 276,
        "db_id": "wta_1",
        "utterance": "How many different winners both participated in the WTA Championships and were left handed?",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 277,
        "db_id": "wta_1",
        "utterance": "Find the number of left handed winners who participated in the WTA Championships.",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)"
        ]
    },
    {
        "id": 278,
        "db_id": "wta_1",
        "utterance": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 279,
        "db_id": "wta_1",
        "utterance": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "rel_schema": [
            "wta_1.matches(best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year)",
            "wta_1.players(player id, first name, last name, hand, birth date, country code)"
        ]
    },
    {
        "id": 280,
        "db_id": "battle_death",
        "utterance": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "rel_schema": [
            "battle_death.ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)"
        ]
    },
    {
        "id": 281,
        "db_id": "battle_death",
        "utterance": "List the name, date and result of each battle.",
        "query": "SELECT name ,  date FROM battle",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)"
        ]
    },
    {
        "id": 282,
        "db_id": "battle_death",
        "utterance": "What is maximum and minimum death toll caused each time?",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "rel_schema": [
            "battle_death.death(caused by ship id, id, note, killed, injured)"
        ]
    },
    {
        "id": 283,
        "db_id": "battle_death",
        "utterance": "What is the average number of injuries caused each time?",
        "query": "SELECT avg(injured) FROM death",
        "rel_schema": [
            "battle_death.death(caused by ship id, id, note, killed, injured)"
        ]
    },
    {
        "id": 284,
        "db_id": "battle_death",
        "utterance": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "rel_schema": [
            "battle_death.death(caused by ship id, id, note, killed, injured)",
            "battle_death.ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)"
        ]
    },
    {
        "id": 285,
        "db_id": "battle_death",
        "utterance": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)"
        ]
    },
    {
        "id": 286,
        "db_id": "battle_death",
        "utterance": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)",
            "battle_death.ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)"
        ]
    },
    {
        "id": 287,
        "db_id": "battle_death",
        "utterance": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)",
            "battle_death.death(caused by ship id, id, note, killed, injured)",
            "battle_death.ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)"
        ]
    },
    {
        "id": 288,
        "db_id": "battle_death",
        "utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)"
        ]
    },
    {
        "id": 289,
        "db_id": "battle_death",
        "utterance": "How many different results are there for the battles?",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)"
        ]
    },
    {
        "id": 290,
        "db_id": "battle_death",
        "utterance": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)",
            "battle_death.ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)"
        ]
    },
    {
        "id": 291,
        "db_id": "battle_death",
        "utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "rel_schema": [
            "battle_death.battle(id, name, date, bulgarian commander, latin commander, result)",
            "battle_death.ship(lost in battle, id, name, tonnage, ship type, location, disposition of ship)"
        ]
    },
    {
        "id": 292,
        "db_id": "battle_death",
        "utterance": "What are the notes of the death events which has substring 'East'?",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "rel_schema": [
            "battle_death.death(caused by ship id, id, note, killed, injured)"
        ]
    },
    {
        "id": 293,
        "db_id": "student_transcripts_tracking",
        "utterance": "what are all the addresses including line 1 and line 2?",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)"
        ]
    },
    {
        "id": 294,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the first and second line for all addresses?",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)"
        ]
    },
    {
        "id": 295,
        "db_id": "student_transcripts_tracking",
        "utterance": "How is the math course described?",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "rel_schema": [
            "student_transcripts_tracking.courses(course id, course name, course description, other details)"
        ]
    },
    {
        "id": 296,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the descriptions for all the math courses?",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "rel_schema": [
            "student_transcripts_tracking.courses(course id, course name, course description, other details)"
        ]
    },
    {
        "id": 297,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the zip code of the address in the city Port Chelsea?",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)"
        ]
    },
    {
        "id": 298,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the zip code for Port Chelsea?",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)"
        ]
    },
    {
        "id": 299,
        "db_id": "student_transcripts_tracking",
        "utterance": "How many departments offer any degree?",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)"
        ]
    },
    {
        "id": 300,
        "db_id": "student_transcripts_tracking",
        "utterance": "How many different departments offer degrees?",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)"
        ]
    },
    {
        "id": 301,
        "db_id": "student_transcripts_tracking",
        "utterance": "How many different degree names are offered?",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)"
        ]
    },
    {
        "id": 302,
        "db_id": "student_transcripts_tracking",
        "utterance": "How many different degrees are offered?",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)"
        ]
    },
    {
        "id": 303,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the names and descriptions of all the sections?",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "rel_schema": [
            "student_transcripts_tracking.sections(section id, course id, section name, section description, other details)"
        ]
    },
    {
        "id": 304,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the names and descriptions for all the sections?",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "rel_schema": [
            "student_transcripts_tracking.sections(section id, course id, section name, section description, other details)"
        ]
    },
    {
        "id": 305,
        "db_id": "student_transcripts_tracking",
        "utterance": "List the section_name in reversed lexicographical order.",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "rel_schema": [
            "student_transcripts_tracking.sections(section id, course id, section name, section description, other details)"
        ]
    },
    {
        "id": 306,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the names of the sections in reverse alphabetical order?",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "rel_schema": [
            "student_transcripts_tracking.sections(section id, course id, section name, section description, other details)"
        ]
    },
    {
        "id": 307,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the description of the department whose name has the substring the computer?",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "rel_schema": [
            "student_transcripts_tracking.departments(department id, department name, department description, other details)"
        ]
    },
    {
        "id": 308,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the department description for the one whose name has the word computer?",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "rel_schema": [
            "student_transcripts_tracking.departments(department id, department name, department description, other details)"
        ]
    },
    {
        "id": 309,
        "db_id": "student_transcripts_tracking",
        "utterance": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)",
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 310,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)",
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 311,
        "db_id": "student_transcripts_tracking",
        "utterance": "Which semesters do not have any student enrolled? List the semester name.",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "rel_schema": [
            "student_transcripts_tracking.semesters(semester id, semester name, semester description, other details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 312,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the name of the semester with no students enrolled?",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "rel_schema": [
            "student_transcripts_tracking.semesters(semester id, semester name, semester description, other details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 313,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are all the course names of the courses which ever have students enrolled in?",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "rel_schema": [
            "student_transcripts_tracking.student enrolment courses(student course id, course id, student enrolment id)",
            "student_transcripts_tracking.courses(course id, course name, course description, other details)"
        ]
    },
    {
        "id": 314,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the names of all courses that have some students enrolled?",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "rel_schema": [
            "student_transcripts_tracking.student enrolment courses(student course id, course id, student enrolment id)",
            "student_transcripts_tracking.courses(course id, course name, course description, other details)"
        ]
    },
    {
        "id": 315,
        "db_id": "student_transcripts_tracking",
        "utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)",
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 316,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)",
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 317,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 318,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the mobile phone number of the student named Timmothy Ward ?",
        "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 319,
        "db_id": "student_transcripts_tracking",
        "utterance": "Who is the first student to register? List the first name, middle name and last name.",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 320,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the first, middle, and last name of the first student to register?",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 321,
        "db_id": "student_transcripts_tracking",
        "utterance": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 322,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the first, middle, and last name of the earliest school graduate?",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 323,
        "db_id": "student_transcripts_tracking",
        "utterance": "Whose permanent address is different from his or her current address? List his or her first name.",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 324,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the first name of the student whose permanent address is different from his or her current one?",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 325,
        "db_id": "student_transcripts_tracking",
        "utterance": "On average, when were the transcripts printed?",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "rel_schema": [
            "student_transcripts_tracking.transcripts(transcript id, transcript date, other details)"
        ]
    },
    {
        "id": 326,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the average transcript date?",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "rel_schema": [
            "student_transcripts_tracking.transcripts(transcript id, transcript date, other details)"
        ]
    },
    {
        "id": 327,
        "db_id": "student_transcripts_tracking",
        "utterance": "When is the first transcript released? List the date and details.",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.transcripts(transcript id, transcript date, other details)"
        ]
    },
    {
        "id": 328,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the earliest date of a transcript release, and what details can you tell me?",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.transcripts(transcript id, transcript date, other details)"
        ]
    },
    {
        "id": 329,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the last transcript release date?",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.transcripts(transcript id, transcript date, other details)"
        ]
    },
    {
        "id": 330,
        "db_id": "student_transcripts_tracking",
        "utterance": "When was the last transcript released?",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "rel_schema": [
            "student_transcripts_tracking.transcripts(transcript id, transcript date, other details)"
        ]
    },
    {
        "id": 331,
        "db_id": "student_transcripts_tracking",
        "utterance": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 332,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "rel_schema": [
            "student_transcripts_tracking.degree programs(degree program id, department id, degree summary name, degree summary description, other details)",
            "student_transcripts_tracking.student enrolment(student enrolment id, degree program id, semester id, student id, other details)"
        ]
    },
    {
        "id": 333,
        "db_id": "student_transcripts_tracking",
        "utterance": "How many different addresses do the students currently live?",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 334,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the different addresses that have students living there?",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 335,
        "db_id": "student_transcripts_tracking",
        "utterance": "List all the student details in reversed lexicographical order.",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 336,
        "db_id": "student_transcripts_tracking",
        "utterance": "What other details can you tell me about students in reverse alphabetical order?",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "rel_schema": [
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 337,
        "db_id": "student_transcripts_tracking",
        "utterance": "Describe the section h.",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "rel_schema": [
            "student_transcripts_tracking.sections(section id, course id, section name, section description, other details)"
        ]
    },
    {
        "id": 338,
        "db_id": "student_transcripts_tracking",
        "utterance": "What is the description for the section named h?",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "rel_schema": [
            "student_transcripts_tracking.sections(section id, course id, section name, section description, other details)"
        ]
    },
    {
        "id": 339,
        "db_id": "student_transcripts_tracking",
        "utterance": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)",
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 340,
        "db_id": "student_transcripts_tracking",
        "utterance": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "rel_schema": [
            "student_transcripts_tracking.addresses(address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details)",
            "student_transcripts_tracking.students(student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details)"
        ]
    },
    {
        "id": 341,
        "db_id": "tvshow",
        "utterance": "List the title of all cartoons in alphabetical order.",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 342,
        "db_id": "tvshow",
        "utterance": "What are the titles of the cartoons sorted alphabetically?",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 343,
        "db_id": "tvshow",
        "utterance": "List all cartoon directed by \"Ben Jones\".",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 344,
        "db_id": "tvshow",
        "utterance": "What are the names of all cartoons directed by Ben Jones?",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 345,
        "db_id": "tvshow",
        "utterance": "list all cartoon titles and their directors ordered by their air date",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 346,
        "db_id": "tvshow",
        "utterance": "What is the name and directors of all the cartoons that are ordered by air date?",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 347,
        "db_id": "tvshow",
        "utterance": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 348,
        "db_id": "tvshow",
        "utterance": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 349,
        "db_id": "tvshow",
        "utterance": "List the number of different series names and contents in the TV Channel table.",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 350,
        "db_id": "tvshow",
        "utterance": "How many different series and contents are listed in the TV Channel table?",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 351,
        "db_id": "tvshow",
        "utterance": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 352,
        "db_id": "tvshow",
        "utterance": "What is the content of the series Sky Radio?",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 353,
        "db_id": "tvshow",
        "utterance": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 354,
        "db_id": "tvshow",
        "utterance": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 355,
        "db_id": "tvshow",
        "utterance": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 356,
        "db_id": "tvshow",
        "utterance": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 357,
        "db_id": "tvshow",
        "utterance": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 358,
        "db_id": "tvshow",
        "utterance": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 359,
        "db_id": "tvshow",
        "utterance": "List the Episode of all TV series sorted by rating.",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 360,
        "db_id": "tvshow",
        "utterance": "What are all of the episodes ordered by ratings?",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 361,
        "db_id": "tvshow",
        "utterance": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 362,
        "db_id": "tvshow",
        "utterance": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 363,
        "db_id": "tvshow",
        "utterance": "What is minimum and maximum share of TV series?",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 364,
        "db_id": "tvshow",
        "utterance": "What is the maximum and minimum share for the TV series?",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 365,
        "db_id": "tvshow",
        "utterance": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 366,
        "db_id": "tvshow",
        "utterance": "When did the episode \"A Love of a Lifetime\" air?",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 367,
        "db_id": "tvshow",
        "utterance": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 368,
        "db_id": "tvshow",
        "utterance": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "rel_schema": [
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 369,
        "db_id": "tvshow",
        "utterance": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 370,
        "db_id": "tvshow",
        "utterance": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 371,
        "db_id": "tvshow",
        "utterance": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 372,
        "db_id": "tvshow",
        "utterance": "What is the episode for the TV series named \"Sky Radio\"?",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.tv series(id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel)"
        ]
    },
    {
        "id": 373,
        "db_id": "tvshow",
        "utterance": "Find the production code and channel of the most recently aired cartoon .",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 374,
        "db_id": "tvshow",
        "utterance": "What is the produdction code and channel of the most recent cartoon ?",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "rel_schema": [
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 375,
        "db_id": "tvshow",
        "utterance": "Find the package choice and series name of the TV channel that has high definition TV.",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 376,
        "db_id": "tvshow",
        "utterance": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 377,
        "db_id": "tvshow",
        "utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 378,
        "db_id": "tvshow",
        "utterance": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 379,
        "db_id": "tvshow",
        "utterance": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 380,
        "db_id": "tvshow",
        "utterance": "What are the countries that are not playing cartoons written by Todd Casey?",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 381,
        "db_id": "tvshow",
        "utterance": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 382,
        "db_id": "tvshow",
        "utterance": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 383,
        "db_id": "tvshow",
        "utterance": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 384,
        "db_id": "tvshow",
        "utterance": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)"
        ]
    },
    {
        "id": 385,
        "db_id": "tvshow",
        "utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 386,
        "db_id": "tvshow",
        "utterance": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 387,
        "db_id": "tvshow",
        "utterance": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 388,
        "db_id": "tvshow",
        "utterance": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "rel_schema": [
            "tvshow.tv channel(id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option)",
            "tvshow.cartoon(id, title, directed by, written by, original air date, production code, channel)"
        ]
    },
    {
        "id": 389,
        "db_id": "poker_player",
        "utterance": "List the earnings of poker players in descending order.",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 390,
        "db_id": "poker_player",
        "utterance": "What are the earnings of poker players, ordered descending by value?",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 391,
        "db_id": "poker_player",
        "utterance": "List the final tables made and the best finishes of poker players.",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 392,
        "db_id": "poker_player",
        "utterance": "What are the final tables made and best finishes for all poker players?",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 393,
        "db_id": "poker_player",
        "utterance": "What is the average earnings of poker players?",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 394,
        "db_id": "poker_player",
        "utterance": "Return the average earnings across all poker players.",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 395,
        "db_id": "poker_player",
        "utterance": "What is the money rank of the poker player with the highest earnings?",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 396,
        "db_id": "poker_player",
        "utterance": "Return the money rank of the player with the greatest earnings.",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 397,
        "db_id": "poker_player",
        "utterance": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 398,
        "db_id": "poker_player",
        "utterance": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "rel_schema": [
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 399,
        "db_id": "poker_player",
        "utterance": "What are the names of poker players?",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 400,
        "db_id": "poker_player",
        "utterance": "Return the names of all the poker players.",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 401,
        "db_id": "poker_player",
        "utterance": "What are the names of poker players whose earnings is higher than 300000?",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 402,
        "db_id": "poker_player",
        "utterance": "Give the names of poker players who have earnings above 300000.",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 403,
        "db_id": "poker_player",
        "utterance": "List the names of poker players ordered by the final tables made in ascending order.",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 404,
        "db_id": "poker_player",
        "utterance": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 405,
        "db_id": "poker_player",
        "utterance": "What is the birth date of the poker player with the lowest earnings?",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 406,
        "db_id": "poker_player",
        "utterance": "Return the birth date of the poker player with the lowest earnings.",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 407,
        "db_id": "poker_player",
        "utterance": "What is the money rank of the tallest poker player?",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 408,
        "db_id": "poker_player",
        "utterance": "Return the money rank of the poker player with the greatest height.",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 409,
        "db_id": "poker_player",
        "utterance": "What is the average earnings of poker players with height higher than 200?",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 410,
        "db_id": "poker_player",
        "utterance": "Give average earnings of poker players who are taller than 200.",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 411,
        "db_id": "poker_player",
        "utterance": "What are the names of poker players in descending order of earnings?",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 412,
        "db_id": "poker_player",
        "utterance": "Return the names of poker players sorted by their earnings descending.",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 413,
        "db_id": "poker_player",
        "utterance": "List the names and birth dates of people in ascending alphabetical order of name.",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)"
        ]
    },
    {
        "id": 414,
        "db_id": "poker_player",
        "utterance": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)"
        ]
    },
    {
        "id": 415,
        "db_id": "poker_player",
        "utterance": "Show names of people whose nationality is not \"Russia\".",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)"
        ]
    },
    {
        "id": 416,
        "db_id": "poker_player",
        "utterance": "What are the names of people who are not from Russia?",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)"
        ]
    },
    {
        "id": 417,
        "db_id": "poker_player",
        "utterance": "List the names of people that are not poker players.",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 418,
        "db_id": "poker_player",
        "utterance": "What are the names of people who do not play poker?",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)",
            "poker_player.poker player(poker player id, people id, final table made, best finish, money rank, earnings)"
        ]
    },
    {
        "id": 419,
        "db_id": "poker_player",
        "utterance": "How many distinct nationalities are there?",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)"
        ]
    },
    {
        "id": 420,
        "db_id": "poker_player",
        "utterance": "Count the number of different nationalities.",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "rel_schema": [
            "poker_player.people(people id, nationality, name, birth date, height)"
        ]
    },
    {
        "id": 421,
        "db_id": "voter_1",
        "utterance": "List the contestant numbers and names, ordered by contestant name descending.",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "rel_schema": [
            "voter_1.contestants(contestant number, contestant name)"
        ]
    },
    {
        "id": 422,
        "db_id": "voter_1",
        "utterance": "List the vote ids, phone numbers and states of all votes.",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "rel_schema": [
            "voter_1.votes(vote id, phone number, state, contestant number, created)"
        ]
    },
    {
        "id": 423,
        "db_id": "voter_1",
        "utterance": "What are the maximum and minimum values of area codes?",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "rel_schema": [
            "voter_1.area code state(area code, state)"
        ]
    },
    {
        "id": 424,
        "db_id": "voter_1",
        "utterance": "What is last date created of votes from the state 'CA'?",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "rel_schema": [
            "voter_1.votes(vote id, phone number, state, contestant number, created)"
        ]
    },
    {
        "id": 425,
        "db_id": "voter_1",
        "utterance": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "rel_schema": [
            "voter_1.contestants(contestant number, contestant name)"
        ]
    },
    {
        "id": 426,
        "db_id": "voter_1",
        "utterance": "What are the distinct states and create time of all votes?",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "rel_schema": [
            "voter_1.votes(vote id, phone number, state, contestant number, created)"
        ]
    },
    {
        "id": 427,
        "db_id": "voter_1",
        "utterance": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "rel_schema": [
            "voter_1.contestants(contestant number, contestant name)",
            "voter_1.votes(vote id, phone number, state, contestant number, created)"
        ]
    },
    {
        "id": 428,
        "db_id": "voter_1",
        "utterance": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "rel_schema": [
            "voter_1.contestants(contestant number, contestant name)",
            "voter_1.votes(vote id, phone number, state, contestant number, created)",
            "voter_1.area code state(area code, state)"
        ]
    },
    {
        "id": 429,
        "db_id": "voter_1",
        "utterance": "Return the names of the contestants whose names contain the substring 'Al' .",
        "query": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "rel_schema": [
            "voter_1.contestants(contestant number, contestant name)"
        ]
    },
    {
        "id": 430,
        "db_id": "world_1",
        "utterance": "What are the names of all the countries that became independent after 1950?",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 431,
        "db_id": "world_1",
        "utterance": "Give the names of the nations that were founded after 1950.",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 432,
        "db_id": "world_1",
        "utterance": "What is the total surface area of the countries in the Caribbean region?",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 433,
        "db_id": "world_1",
        "utterance": "How much surface area do the countires in the Carribean cover together?",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 434,
        "db_id": "world_1",
        "utterance": "Which continent is Anguilla in?",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 435,
        "db_id": "world_1",
        "utterance": "What is the continent name which Anguilla belongs to?",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 436,
        "db_id": "world_1",
        "utterance": "Which region is the city Kabul located in?",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 437,
        "db_id": "world_1",
        "utterance": "What region is Kabul in?",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 438,
        "db_id": "world_1",
        "utterance": "Which language is the most popular in Aruba?",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 439,
        "db_id": "world_1",
        "utterance": "What language is predominantly spoken in Aruba?",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 440,
        "db_id": "world_1",
        "utterance": "What are the population and life expectancies in Brazil?",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 441,
        "db_id": "world_1",
        "utterance": "Give me Brazil’s population and life expectancies.",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 442,
        "db_id": "world_1",
        "utterance": "What are the region and population of Angola?",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 443,
        "db_id": "world_1",
        "utterance": "What region does Angola belong to and what is its population?",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 444,
        "db_id": "world_1",
        "utterance": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 445,
        "db_id": "world_1",
        "utterance": "How long is the people’s average life expectancy in Central Africa?",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 446,
        "db_id": "world_1",
        "utterance": "What is the name of country that has the shortest life expectancy in Asia?",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 447,
        "db_id": "world_1",
        "utterance": "Give the name of the country in Asia with the lowest life expectancy.",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 448,
        "db_id": "world_1",
        "utterance": "What is the total population and maximum GNP in Asia?",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 449,
        "db_id": "world_1",
        "utterance": "How many people live in Asia, and what is the largest GNP among them?",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 450,
        "db_id": "world_1",
        "utterance": "What is the average life expectancy in African countries that are republics?",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 451,
        "db_id": "world_1",
        "utterance": "Give the average life expectancy for countries in Africa which are republics?",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 452,
        "db_id": "world_1",
        "utterance": "What is the total surface area of the continents Asia and Europe?",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 453,
        "db_id": "world_1",
        "utterance": "Give the total surface area covered by countries in Asia or Europe.",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 454,
        "db_id": "world_1",
        "utterance": "How many people live in Gelderland district?",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)"
        ]
    },
    {
        "id": 455,
        "db_id": "world_1",
        "utterance": "What is the total population of Gelderland district?",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)"
        ]
    },
    {
        "id": 456,
        "db_id": "world_1",
        "utterance": "What is the average GNP and total population in all nations whose government is US territory?",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 457,
        "db_id": "world_1",
        "utterance": "Give the mean GNP and total population of nations which are considered US territory.",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 458,
        "db_id": "world_1",
        "utterance": "How many unique languages are spoken in the world?",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 459,
        "db_id": "world_1",
        "utterance": "What is the number of distinct languages used around the world?",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 460,
        "db_id": "world_1",
        "utterance": "How many type of governments are in Africa?",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 461,
        "db_id": "world_1",
        "utterance": "How many different forms of governments are there in Africa?",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 462,
        "db_id": "world_1",
        "utterance": "What is the total number of languages used in Aruba?",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 463,
        "db_id": "world_1",
        "utterance": "How many languages are spoken in Aruba?",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 464,
        "db_id": "world_1",
        "utterance": "What are the names of nations speak both English and French?",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 465,
        "db_id": "world_1",
        "utterance": "Give the names of nations that speak both English and French.",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 466,
        "db_id": "world_1",
        "utterance": "What are the names of nations where both English and French are official languages?",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 467,
        "db_id": "world_1",
        "utterance": "Give the names of countries with English and French as official languages.",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 468,
        "db_id": "world_1",
        "utterance": "What is the number of distinct continents where Chinese is spoken?",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 469,
        "db_id": "world_1",
        "utterance": "How many continents speak Chinese?",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 470,
        "db_id": "world_1",
        "utterance": "What are the regions that use English or Dutch?",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 471,
        "db_id": "world_1",
        "utterance": "Which regions speak Dutch or English?",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 472,
        "db_id": "world_1",
        "utterance": "What are the countries where either English or Dutch is the official language ?",
        "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 473,
        "db_id": "world_1",
        "utterance": "Find the city with the largest population that uses English.",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 474,
        "db_id": "world_1",
        "utterance": "What is the most populace city that speaks English?",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 475,
        "db_id": "world_1",
        "utterance": "Find the name, population and expected life length of asian country with the largest area?",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 476,
        "db_id": "world_1",
        "utterance": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 477,
        "db_id": "world_1",
        "utterance": "What is average life expectancy in the countries where English is not the official language?",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 478,
        "db_id": "world_1",
        "utterance": "Give the mean life expectancy of countries in which English is not the official language.",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 479,
        "db_id": "world_1",
        "utterance": "What is the total number of people living in the nations that do not use English?",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 480,
        "db_id": "world_1",
        "utterance": "How many people live in countries that do not speak English?",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 481,
        "db_id": "world_1",
        "utterance": "What is the official language spoken in the country whose head of state is Beatrix?",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 482,
        "db_id": "world_1",
        "utterance": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 483,
        "db_id": "world_1",
        "utterance": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 484,
        "db_id": "world_1",
        "utterance": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 485,
        "db_id": "world_1",
        "utterance": "What are the countries that have greater surface area than any country in Europe?",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 486,
        "db_id": "world_1",
        "utterance": "Which countries have greater area than that of any country in Europe?",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 487,
        "db_id": "world_1",
        "utterance": "What are the African countries that have a  population less than any country in Asia?",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 488,
        "db_id": "world_1",
        "utterance": "Which African countries have a smaller population than that of any country in Asia?",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 489,
        "db_id": "world_1",
        "utterance": "Which Asian countries have a population that is larger than any country in Africa?",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 490,
        "db_id": "world_1",
        "utterance": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 491,
        "db_id": "world_1",
        "utterance": "What are the country codes for countries that do not speak English?",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 492,
        "db_id": "world_1",
        "utterance": "Return the country codes for countries that do not speak English.",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 493,
        "db_id": "world_1",
        "utterance": "What are the country codes of countries where people use languages other than English?",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 494,
        "db_id": "world_1",
        "utterance": "Give the country codes for countries in which people speak langauges that are not English.",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 495,
        "db_id": "world_1",
        "utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 496,
        "db_id": "world_1",
        "utterance": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 497,
        "db_id": "world_1",
        "utterance": "Which cities are in European countries where English is not the official language?",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 498,
        "db_id": "world_1",
        "utterance": "What are the names of cities in Europe for which English is not the official language?",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 499,
        "db_id": "world_1",
        "utterance": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 500,
        "db_id": "world_1",
        "utterance": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)",
            "world_1.countrylanguage(countrycode, language, is official, percentage)",
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 501,
        "db_id": "world_1",
        "utterance": "What are the name, independence year, and surface area of the country with the smallest population?",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 502,
        "db_id": "world_1",
        "utterance": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 503,
        "db_id": "world_1",
        "utterance": "What are the population, name and leader of the country with the largest area?",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 504,
        "db_id": "world_1",
        "utterance": "Give the name, population, and head of state for the country that has the largest area.",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 505,
        "db_id": "world_1",
        "utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 506,
        "db_id": "world_1",
        "utterance": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 507,
        "db_id": "world_1",
        "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 508,
        "db_id": "world_1",
        "utterance": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 509,
        "db_id": "world_1",
        "utterance": "What are the names and areas of countries with the top 5 largest area?",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 510,
        "db_id": "world_1",
        "utterance": "Return the names and surface areas of the 5 largest countries.",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 511,
        "db_id": "world_1",
        "utterance": "What are names of countries with the top 3 largest population?",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 512,
        "db_id": "world_1",
        "utterance": "Return the names of the 3 most populated countries.",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 513,
        "db_id": "world_1",
        "utterance": "What are the names of the nations with the 3 lowest populations?",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 514,
        "db_id": "world_1",
        "utterance": "Return the names of the 3 countries with the fewest people.",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 515,
        "db_id": "world_1",
        "utterance": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 516,
        "db_id": "world_1",
        "utterance": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 517,
        "db_id": "world_1",
        "utterance": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 518,
        "db_id": "world_1",
        "utterance": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "rel_schema": [
            "world_1.country(code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2)"
        ]
    },
    {
        "id": 519,
        "db_id": "world_1",
        "utterance": "What are the cities whose population is between 160000 and 900000?",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)"
        ]
    },
    {
        "id": 520,
        "db_id": "world_1",
        "utterance": "Return the names of cities that have a population between 160000 and 900000 .",
        "query": "select name from city where population between 160000 and 900000",
        "rel_schema": [
            "world_1.city(id, name, country code, district, population)"
        ]
    },
    {
        "id": 521,
        "db_id": "world_1",
        "utterance": "What is the language spoken by the largest percentage of people in each country?",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 522,
        "db_id": "world_1",
        "utterance": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 523,
        "db_id": "world_1",
        "utterance": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 524,
        "db_id": "world_1",
        "utterance": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "rel_schema": [
            "world_1.countrylanguage(countrycode, language, is official, percentage)"
        ]
    },
    {
        "id": 525,
        "db_id": "orchestra",
        "utterance": "List the names of conductors in ascending order of age.",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 526,
        "db_id": "orchestra",
        "utterance": "What are the names of conductors, ordered by age?",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 527,
        "db_id": "orchestra",
        "utterance": "What are the names of conductors whose nationalities are not \"USA\"?",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 528,
        "db_id": "orchestra",
        "utterance": "Return the names of conductors that do not have the nationality \"USA\".",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 529,
        "db_id": "orchestra",
        "utterance": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "rel_schema": [
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 530,
        "db_id": "orchestra",
        "utterance": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "rel_schema": [
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 531,
        "db_id": "orchestra",
        "utterance": "What is the average attendance of shows?",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "rel_schema": [
            "orchestra.show(show id, performance id, if first show, result, attendance)"
        ]
    },
    {
        "id": 532,
        "db_id": "orchestra",
        "utterance": "Return the average attendance across all shows.",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "rel_schema": [
            "orchestra.show(show id, performance id, if first show, result, attendance)"
        ]
    },
    {
        "id": 533,
        "db_id": "orchestra",
        "utterance": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "rel_schema": [
            "orchestra.performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)"
        ]
    },
    {
        "id": 534,
        "db_id": "orchestra",
        "utterance": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "rel_schema": [
            "orchestra.performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)"
        ]
    },
    {
        "id": 535,
        "db_id": "orchestra",
        "utterance": "How many different nationalities do conductors have?",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 536,
        "db_id": "orchestra",
        "utterance": "Count the number of different nationalities of conductors.",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 537,
        "db_id": "orchestra",
        "utterance": "List names of conductors in descending order of years of work.",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 538,
        "db_id": "orchestra",
        "utterance": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 539,
        "db_id": "orchestra",
        "utterance": "List the name of the conductor with the most years of work.",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 540,
        "db_id": "orchestra",
        "utterance": "What is the name of the conductor who has worked the greatest number of years?",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)"
        ]
    },
    {
        "id": 541,
        "db_id": "orchestra",
        "utterance": "Show the names of conductors and the orchestras they have conducted.",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)",
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 542,
        "db_id": "orchestra",
        "utterance": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)",
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 543,
        "db_id": "orchestra",
        "utterance": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)",
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 544,
        "db_id": "orchestra",
        "utterance": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "rel_schema": [
            "orchestra.conductor(conductor id, name, age, nationality, year of work)",
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 545,
        "db_id": "orchestra",
        "utterance": "List the names of orchestras that have no performance.",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "rel_schema": [
            "orchestra.performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)",
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 546,
        "db_id": "orchestra",
        "utterance": "What are the orchestras that do not have any performances?",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "rel_schema": [
            "orchestra.performance(performance id, orchestra id, type, date, official ratings (millions), weekly rank, share)",
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 547,
        "db_id": "orchestra",
        "utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "rel_schema": [
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 548,
        "db_id": "orchestra",
        "utterance": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "rel_schema": [
            "orchestra.orchestra(orchestra id, orchestra, conductor id, record company, year of founded, major record format)"
        ]
    },
    {
        "id": 549,
        "db_id": "network_1",
        "utterance": "Show the names and grades of each high schooler.",
        "query": "SELECT name ,  grade FROM Highschooler",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 550,
        "db_id": "network_1",
        "utterance": "What are the names and grades for each high schooler?",
        "query": "SELECT name ,  grade FROM Highschooler",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 551,
        "db_id": "network_1",
        "utterance": "Show all the grades of the high schoolers.",
        "query": "SELECT grade FROM Highschooler",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 552,
        "db_id": "network_1",
        "utterance": "What is the grade of each high schooler?",
        "query": "SELECT grade FROM Highschooler",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 553,
        "db_id": "network_1",
        "utterance": "What grade is Kyle in?",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 554,
        "db_id": "network_1",
        "utterance": "Return the grade for the high schooler named Kyle.",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 555,
        "db_id": "network_1",
        "utterance": "Show the names of all high schoolers in grade 10.",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 556,
        "db_id": "network_1",
        "utterance": "What are the names of all high schoolers in grade 10?",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 557,
        "db_id": "network_1",
        "utterance": "Show the ID of the high schooler named Kyle.",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 558,
        "db_id": "network_1",
        "utterance": "What is Kyle's id?",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "rel_schema": [
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 559,
        "db_id": "network_1",
        "utterance": "Show the names of all of the high schooler Kyle's friends.",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 560,
        "db_id": "network_1",
        "utterance": "Return the names of friends of the high school student Kyle.",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 561,
        "db_id": "network_1",
        "utterance": "Show ids of all students who do not have any friends.",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 562,
        "db_id": "network_1",
        "utterance": "What are the ids of high school students who do not have friends?",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 563,
        "db_id": "network_1",
        "utterance": "Show names of all high school students who do not have any friends.",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 564,
        "db_id": "network_1",
        "utterance": "What are the names of students who have no friends?",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 565,
        "db_id": "network_1",
        "utterance": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.likes(student id, liked id)"
        ]
    },
    {
        "id": 566,
        "db_id": "network_1",
        "utterance": "What are the ids of students who both have friends and are liked?",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.likes(student id, liked id)"
        ]
    },
    {
        "id": 567,
        "db_id": "network_1",
        "utterance": "Show name of all students who have some friends and also are liked by someone else.",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.likes(student id, liked id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 568,
        "db_id": "network_1",
        "utterance": "What are the names of high schoolers who both have friends and are liked?",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.likes(student id, liked id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 569,
        "db_id": "network_1",
        "utterance": "Find the average grade of all students who have some friends.",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 570,
        "db_id": "network_1",
        "utterance": "What is the average grade of students who have friends?",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 571,
        "db_id": "network_1",
        "utterance": "Find the minimum grade of students who have no friends.",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 572,
        "db_id": "network_1",
        "utterance": "What is the lowest grade of students who do not have any friends?",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "rel_schema": [
            "network_1.friend(student id, friend id)",
            "network_1.high schooler(id, name, grade)"
        ]
    },
    {
        "id": 573,
        "db_id": "dog_kennels",
        "utterance": "Which states have both owners and professionals living there?",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 574,
        "db_id": "dog_kennels",
        "utterance": "Find the states where both owners and professionals live.",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 575,
        "db_id": "dog_kennels",
        "utterance": "What is the average age of the dogs who have gone through any treatments?",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 576,
        "db_id": "dog_kennels",
        "utterance": "Find the average age of the dogs who went through treatments.",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 577,
        "db_id": "dog_kennels",
        "utterance": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 578,
        "db_id": "dog_kennels",
        "utterance": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 579,
        "db_id": "dog_kennels",
        "utterance": "Which first names are used for professionals or owners but are not used as dog names?",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 580,
        "db_id": "dog_kennels",
        "utterance": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 581,
        "db_id": "dog_kennels",
        "utterance": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 582,
        "db_id": "dog_kennels",
        "utterance": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 583,
        "db_id": "dog_kennels",
        "utterance": "What is the description of the treatment type that costs the least money in total?",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.treatment types(treatment type code, treatment type description)"
        ]
    },
    {
        "id": 584,
        "db_id": "dog_kennels",
        "utterance": "Give me the description of the treatment type whose total cost is the lowest.",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.treatment types(treatment type code, treatment type description)"
        ]
    },
    {
        "id": 585,
        "db_id": "dog_kennels",
        "utterance": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 586,
        "db_id": "dog_kennels",
        "utterance": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 587,
        "db_id": "dog_kennels",
        "utterance": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 588,
        "db_id": "dog_kennels",
        "utterance": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 589,
        "db_id": "dog_kennels",
        "utterance": "List the date of each treatment, together with the first name of the professional who operated it.",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 590,
        "db_id": "dog_kennels",
        "utterance": "What are the date and the operating professional's first name of each treatment?",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 591,
        "db_id": "dog_kennels",
        "utterance": "List the cost of each treatment and the corresponding treatment type description.",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.treatment types(treatment type code, treatment type description)"
        ]
    },
    {
        "id": 592,
        "db_id": "dog_kennels",
        "utterance": "What are the cost and treatment type description of each treatment?",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.treatment types(treatment type code, treatment type description)"
        ]
    },
    {
        "id": 593,
        "db_id": "dog_kennels",
        "utterance": "List each owner's first name, last name, and the size of his for her dog.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 594,
        "db_id": "dog_kennels",
        "utterance": "What are each owner's first name, last name, and the size of their dog?",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 595,
        "db_id": "dog_kennels",
        "utterance": "List pairs of the owner's first name and the dogs's name.",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 596,
        "db_id": "dog_kennels",
        "utterance": "What are each owner's first name and their dogs's name?",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 597,
        "db_id": "dog_kennels",
        "utterance": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 598,
        "db_id": "dog_kennels",
        "utterance": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 599,
        "db_id": "dog_kennels",
        "utterance": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 600,
        "db_id": "dog_kennels",
        "utterance": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 601,
        "db_id": "dog_kennels",
        "utterance": "List the last name of the owner owning the youngest dog.",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 602,
        "db_id": "dog_kennels",
        "utterance": "Who owns the youngest dog? Give me his or her last name.",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)",
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 603,
        "db_id": "dog_kennels",
        "utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 604,
        "db_id": "dog_kennels",
        "utterance": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 605,
        "db_id": "dog_kennels",
        "utterance": "What are the arriving date and the departing date of all the dogs?",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 606,
        "db_id": "dog_kennels",
        "utterance": "List the arrival date and the departure date for all the dogs.",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 607,
        "db_id": "dog_kennels",
        "utterance": "How many dogs went through any treatments?",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 608,
        "db_id": "dog_kennels",
        "utterance": "Count the number of dogs that went through a treatment.",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 609,
        "db_id": "dog_kennels",
        "utterance": "How many professionals have performed any treatment to dogs?",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 610,
        "db_id": "dog_kennels",
        "utterance": "Find the number of professionals who have ever treated dogs.",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 611,
        "db_id": "dog_kennels",
        "utterance": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 612,
        "db_id": "dog_kennels",
        "utterance": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 613,
        "db_id": "dog_kennels",
        "utterance": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)"
        ]
    },
    {
        "id": 614,
        "db_id": "dog_kennels",
        "utterance": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "rel_schema": [
            "dog_kennels.owners(owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number)"
        ]
    },
    {
        "id": 615,
        "db_id": "dog_kennels",
        "utterance": "How much does the most recent treatment cost?",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 616,
        "db_id": "dog_kennels",
        "utterance": "Show me the cost of the most recently performed treatment.",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "rel_schema": [
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 617,
        "db_id": "dog_kennels",
        "utterance": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 618,
        "db_id": "dog_kennels",
        "utterance": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 619,
        "db_id": "dog_kennels",
        "utterance": "What is the average age of all the dogs?",
        "query": "SELECT avg(age) FROM Dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 620,
        "db_id": "dog_kennels",
        "utterance": "Compute the average age of all the dogs.",
        "query": "SELECT avg(age) FROM Dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 621,
        "db_id": "dog_kennels",
        "utterance": "What is the age of the oldest dog?",
        "query": "SELECT max(age) FROM Dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 622,
        "db_id": "dog_kennels",
        "utterance": "Tell me the age of the oldest dog.",
        "query": "SELECT max(age) FROM Dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 623,
        "db_id": "dog_kennels",
        "utterance": "How much does each charge type costs? List both charge type and amount.",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "rel_schema": [
            "dog_kennels.charges(charge id, charge type, charge amount)"
        ]
    },
    {
        "id": 624,
        "db_id": "dog_kennels",
        "utterance": "List each charge type and its amount.",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "rel_schema": [
            "dog_kennels.charges(charge id, charge type, charge amount)"
        ]
    },
    {
        "id": 625,
        "db_id": "dog_kennels",
        "utterance": "How much does the most expensive charge type costs?",
        "query": "SELECT max(charge_amount) FROM Charges",
        "rel_schema": [
            "dog_kennels.charges(charge id, charge type, charge amount)"
        ]
    },
    {
        "id": 626,
        "db_id": "dog_kennels",
        "utterance": "What is the charge amount of the most expensive charge type?",
        "query": "SELECT max(charge_amount) FROM Charges",
        "rel_schema": [
            "dog_kennels.charges(charge id, charge type, charge amount)"
        ]
    },
    {
        "id": 627,
        "db_id": "dog_kennels",
        "utterance": "List the email, cell phone and home phone of all the professionals.",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 628,
        "db_id": "dog_kennels",
        "utterance": "What are the email, cell phone and home phone of each professional?",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)"
        ]
    },
    {
        "id": 629,
        "db_id": "dog_kennels",
        "utterance": "What are all the possible breed type and size type combinations?",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 630,
        "db_id": "dog_kennels",
        "utterance": "Find the distinct breed type and size type combinations for dogs.",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "rel_schema": [
            "dog_kennels.dogs(dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed)"
        ]
    },
    {
        "id": 631,
        "db_id": "dog_kennels",
        "utterance": "List the first name of all the professionals along with the description of the treatment they have done.",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatment types(treatment type code, treatment type description)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 632,
        "db_id": "dog_kennels",
        "utterance": "What are each professional's first name and description of the treatment they have performed?",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "rel_schema": [
            "dog_kennels.professionals(professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number)",
            "dog_kennels.treatment types(treatment type code, treatment type description)",
            "dog_kennels.treatments(treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment)"
        ]
    },
    {
        "id": 633,
        "db_id": "singer",
        "utterance": "List the name of singers in ascending order of net worth.",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 634,
        "db_id": "singer",
        "utterance": "What are the names of singers ordered by ascending net worth?",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 635,
        "db_id": "singer",
        "utterance": "What are the birth year and citizenship of singers?",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 636,
        "db_id": "singer",
        "utterance": "What are the birth years and citizenships of the singers?",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 637,
        "db_id": "singer",
        "utterance": "List the name of singers whose citizenship is not \"France\".",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 638,
        "db_id": "singer",
        "utterance": "What are the names of the singers who are not French citizens?",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 639,
        "db_id": "singer",
        "utterance": "Show the name of singers whose birth year is either 1948 or 1949?",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 640,
        "db_id": "singer",
        "utterance": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 641,
        "db_id": "singer",
        "utterance": "What is the name of the singer with the largest net worth?",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 642,
        "db_id": "singer",
        "utterance": "What is the name of the singer who is worth the most?",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 643,
        "db_id": "singer",
        "utterance": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 644,
        "db_id": "singer",
        "utterance": "For each citizenship, what is the maximum net worth?",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 645,
        "db_id": "singer",
        "utterance": "Show titles of songs and names of singers.",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 646,
        "db_id": "singer",
        "utterance": "What are the song titles and singer names?",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 647,
        "db_id": "singer",
        "utterance": "Show distinct names of singers that have songs with sales more than 300000.",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 648,
        "db_id": "singer",
        "utterance": "what are the different names of the singers that have sales more than 300000?",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 649,
        "db_id": "singer",
        "utterance": "Show the names of singers and the total sales of their songs.",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 650,
        "db_id": "singer",
        "utterance": "For each singer name, what is the total sales for their songs?",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 651,
        "db_id": "singer",
        "utterance": "List the name of singers that do not have any song.",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 652,
        "db_id": "singer",
        "utterance": "What is the sname of every sing that does not have any song?",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)",
            "singer.song(song id, title, singer id, sales, highest position)"
        ]
    },
    {
        "id": 653,
        "db_id": "singer",
        "utterance": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 654,
        "db_id": "singer",
        "utterance": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "rel_schema": [
            "singer.singer(singer id, name, birth year, net worth millions, citizenship)"
        ]
    },
    {
        "id": 655,
        "db_id": "real_estate_properties",
        "utterance": "What is the feature type name of feature AirCon?",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "rel_schema": [
            "real_estate_properties.other available features(feature id, feature type code, feature name, feature description)",
            "real_estate_properties.reference feature types(feature type code, feature type name)"
        ]
    },
    {
        "id": 656,
        "db_id": "real_estate_properties",
        "utterance": "Show the property type descriptions of properties belonging to that code.",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "rel_schema": [
            "real_estate_properties.reference property types(property type code, property type description)",
            "real_estate_properties.properties(property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details)"
        ]
    },
    {
        "id": 657,
        "db_id": "real_estate_properties",
        "utterance": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "rel_schema": [
            "real_estate_properties.properties(property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details)"
        ]
    }
]